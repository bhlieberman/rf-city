shadow$provide.module$node_modules$$mui$x_date_pickers$node$DateCalendar$useCalendarState=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
Object.defineProperty(exports,"__esModule",{value:!0});exports.useCalendarState=exports.createCalendarStateReducer=void 0;var _extends2=global(require("module$node_modules$$babel$runtime$helpers$extends")),React=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=
Object.defineProperty&&Object.getOwnPropertyDescriptor,key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}(require("module$node_modules$react$index")),_useEventCallback=global(require("module$node_modules$$mui$utils$useEventCallback")),
_useDateValidation=require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$validation$useDateValidation"),_useUtils=require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils"),_dateUtils=require("module$node_modules$$mui$x_date_pickers$node$internals$utils$date_utils");const createCalendarStateReducer=(reduceAnimations,disableSwitchToMonthOnDayFocus,utils)=>(state,action)=>{switch(action.type){case "changeMonth":return(0,_extends2.default)({},state,{slideDirection:action.direction,
currentMonth:action.newMonth,isMonthSwitchingAnimating:!reduceAnimations});case "finishMonthSwitchingAnimation":return(0,_extends2.default)({},state,{isMonthSwitchingAnimating:!1});case "changeFocusedDay":if(null!=state.focusedDay&&null!=action.focusedDay&&utils.isSameDay(action.focusedDay,state.focusedDay))return state;const needMonthSwitch=null!=action.focusedDay&&!disableSwitchToMonthOnDayFocus&&!utils.isSameMonth(state.currentMonth,action.focusedDay);return(0,_extends2.default)({},state,{focusedDay:action.focusedDay,
isMonthSwitchingAnimating:needMonthSwitch&&!reduceAnimations&&!action.withoutMonthSwitchingAnimation,currentMonth:needMonthSwitch?utils.startOfMonth(action.focusedDay):state.currentMonth,slideDirection:null!=action.focusedDay&&utils.isAfterDay(action.focusedDay,state.currentMonth)?"left":"right"});default:throw Error("missing support");}};exports.createCalendarStateReducer=createCalendarStateReducer;exports.useCalendarState=({value,defaultCalendarMonth,disableFuture,disablePast,disableSwitchToMonthOnDayFocus=
!1,maxDate,minDate,onMonthChange,reduceAnimations,shouldDisableDate})=>{const now=(0,_useUtils.useNow)(),utils=(0,_useUtils.useUtils)();disableSwitchToMonthOnDayFocus=React.useRef(createCalendarStateReducer(!!reduceAnimations,disableSwitchToMonthOnDayFocus,utils)).current;const [calendarState,dispatch]=React.useReducer(disableSwitchToMonthOnDayFocus,{isMonthSwitchingAnimating:!1,focusedDay:value||now,currentMonth:utils.startOfMonth(value??defaultCalendarMonth??(0,_dateUtils.clamp)(utils,now,minDate,
maxDate)),slideDirection:"left"}),handleChangeMonth=React.useCallback(payload=>{dispatch((0,_extends2.default)({type:"changeMonth"},payload));onMonthChange&&onMonthChange(payload.newMonth)},[onMonthChange]);value=React.useCallback(newDate=>{utils.isSameMonth(newDate,calendarState.currentMonth)||handleChangeMonth({newMonth:utils.startOfMonth(newDate),direction:utils.isAfterDay(newDate,calendarState.currentMonth)?"left":"right"})},[calendarState.currentMonth,handleChangeMonth,utils]);const isDateDisabled=
(0,_useDateValidation.useIsDateDisabled)({shouldDisableDate,minDate,maxDate,disableFuture,disablePast});disableFuture=React.useCallback(()=>{dispatch({type:"finishMonthSwitchingAnimation"})},[]);disablePast=(0,_useEventCallback.default)((newFocusedDate,withoutMonthSwitchingAnimation)=>{isDateDisabled(newFocusedDate)||dispatch({type:"changeFocusedDay",focusedDay:newFocusedDate,withoutMonthSwitchingAnimation})});return{calendarState,changeMonth:value,changeFocusedDay:disablePast,isDateDisabled,onMonthSwitchingAnimationEnd:disableFuture,
handleChangeMonth}}}
//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$DateCalendar$useCalendarState.js.map
