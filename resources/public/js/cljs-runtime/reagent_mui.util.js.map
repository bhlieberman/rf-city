{"version":3,"sources":["reagent_mui/util.cljs"],"mappings":"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","names":["reagent-mui.util/ref-key?","k","and__5043__auto__","or__5045__auto__","reagent-mui.util/color-key?","reagent-mui.util/numeric-string?","s","cljs.core/re-matches","reagent-mui.util/pascal-case?","cljs.core/contains?","cljs.core/first","reagent-mui.util/keyword-safe?","reagent-mui.util/key->str","n","cljs.core/name","clojure.string/starts-with?","camel-snake-kebab.core/->camelCaseString","reagent-mui.util/convert-map-keys","m","f","clojure.walk/postwalk","x","cljs.core/map-entry?","G__33094","cljs.core/key","cljs.core/val","reagent-mui.util/clj->js'","obj","cljs.core/clj->js","cljs.core/Keyword","reagent-mui.util/js-key->clj","cljs.core.keyword","js/parseInt","camel-snake-kebab.core/->kebab-case-keyword","reagent-mui.util/js->clj'","convert","cljs.core/seq?","cljs.core.doall","cljs.core.map","cljs.core/MapEntry","cljs.core/coll?","cljs.core.into","cljs.core/empty","cljs.core/array?","cljs.core/persistent!","p1__33102#","p2__33104#","cljs.core.reduce","cljs.core.conj_BANG_","cljs.core/transient","js/module$node_modules$react$index.isValidElement","cljs.core/type","js/Object","r","cljs.core.assoc_BANG_","reagent_mui.util.goog$module$goog$object.get","cljs.core/js-keys","reagent-mui.util/wrap-clj-function","args","cljs.core.apply","reagent-mui.util/wrap-js-function","reagent-mui.util/wrap-all-clj-functions","cljs.core/fn?","reagent-mui.util/wrap-all-js-functions","reagent-mui.util/reactify-component","component","reactified","js/module$node_modules$react$index.forwardRef","props","ref","clj-props","cljs.core.assoc","reagent.core.as_element","reagent.impl.util/fun-name","reagent-mui.util/wrap-styles","styles","theme","G__33109","reagent-mui.util/apply-hoc","hoc","G__33110","reagent.core/adapt-react-class","var_args","G__33112","reagent-mui.util/get-anycase","js/Error","reagent_mui.util.get_anycase","default","temp__5802__auto__","entry","cljs.core/find","camel-snake-kebab.core/->camelCaseKeyword","G__33118","reagent-mui.util/assoc-anycase","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq33114","G__33115","cljs.core/next","G__33116","G__33117","self__5754__auto__","v","cljs.core.dissoc","kvs","ret","reagent_mui.util.assoc_anycase","cljs.core/second","cljs.core/nnext","reagent-mui.util/remove-undefined-vals","cljs.core/reduce-kv","acc","cljs.core.dissoc_BANG_","reagent-mui.util/set-ref","value","js/undefined","args__5775__auto__","argseq__5776__auto__","reagent-mui.util/swap-ref","seq33119","G__33120","G__33121","reagent-mui.util/use-fork-ref","seq33122","self__5755__auto__","cljs.core/seq","refs","js/module$node_modules$react$index.useMemo","cljs.core/not-every?","cljs.core/nil?","seq__33123","chunk__33124","count__33125","i__33126","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/array","reagent-mui.util/use-callback","callback","js/module$node_modules$react$index.useCallback","reagent-mui.util/use-effect","effect","js/module$node_modules$react$index.useEffect","reagent-mui.util/use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","reagent-mui.util/use-ref","js/module$node_modules$react$index.useRef","reagent-mui.util/use-state","initial-state","js/module$node_modules$react$index.useState"],"sourcesContent":["(ns reagent-mui.util\n  (:require-macros [reagent-mui.util :refer [e forward-ref]])\n  (:require [react :as react]\n            [reagent.core :as r]\n            [reagent.impl.util :refer [fun-name]]\n            [cljs.core :refer [MapEntry]]\n            [clojure.string :as str]\n            [clojure.walk :refer [postwalk]]\n            [camel-snake-kebab.core :refer [->kebab-case-keyword ->camelCaseKeyword ->camelCaseString]]\n            [goog.object :as obj]\n            [\"@mui/material/SvgIcon\" :as SvgIcon]))\n\n(defn ^:private ref-key? [k]\n  (and (string? k)\n       (or (.endsWith k \"ref\")\n           (.endsWith k \"Ref\"))))\n(def ^:private color-key? #{:A100 :A200 :A400 :A700 \"A100\" \"A200\" \"A400\" \"A700\"})\n(defn ^:private numeric-string? [s]\n  (and (string? s)\n       (some? (re-matches #\"[0-9]+\" s))))\n(defn ^:private pascal-case? [s]\n  (and (string? s)\n       (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                  (first s))))\n(defn ^:private keyword-safe? [s]\n  (some? (re-matches #\"[-*+!?<>='&$%#|\\w]+\" s)))\n\n(defn ^:private key->str [k]\n  (let [n (name k)]\n    (cond\n      (color-key? k) n\n      (str/starts-with? n \"data-\") n\n      (str/starts-with? n \"aria-\") n\n      (pascal-case? n) n\n      :else (->camelCaseString k))))\n\n(defn ^:private convert-map-keys [m f]\n  (postwalk (fn [x]\n              (if (map-entry? x)\n                [(f (key x)) (val x)]\n                x))\n            m))\n\n(defn clj->js'\n  [obj]\n  (clj->js (convert-map-keys obj (fn [k]\n                                   (if (keyword? k)\n                                     (key->str k)\n                                     k)))))\n\n(defn ^:private js-key->clj [k]\n  (cond\n    (keyword? k) k\n    (color-key? k) (keyword k)\n    (numeric-string? k) (js/parseInt k)\n    (keyword-safe? k) (if (pascal-case? k)\n                        (keyword k)\n                        (->kebab-case-keyword k))\n    :else k))\n\n(defn js->clj'\n  [obj]\n  (let [convert (fn convert [x]\n                  (cond\n                    (seq? x)\n                    (doall (map convert x))\n\n                    (map-entry? x)\n                    (MapEntry. (convert (key x)) (convert (val x)) nil)\n\n                    (coll? x)\n                    (into (empty x) (map convert) x)\n\n                    (array? x)\n                    (persistent!\n                     (reduce #(conj! %1 (convert %2))\n                             (transient []) x))\n\n                    (react/isValidElement x)\n                    x\n\n                    (identical? (type x) js/Object)\n                    (persistent!\n                     (reduce (fn [r k]\n                               (assoc! r (js-key->clj k) (if (ref-key? k)\n                                                           (obj/get x k)\n                                                           (convert (obj/get x k)))))\n                             (transient {}) (js-keys x)))\n                    :else x))]\n    (convert obj)))\n\n(defn wrap-clj-function [f]\n  (fn [& args]\n    (clj->js' (apply f (map js->clj' args)))))\n\n(defn wrap-js-function [f]\n  (fn [& args]\n    (js->clj' (apply f (map clj->js' args)))))\n\n(defn wrap-all-clj-functions [m]\n  (postwalk (fn [x]\n              (if (fn? x)\n                (wrap-clj-function x)\n                x))\n            m))\n\n(defn wrap-all-js-functions [m]\n  (postwalk (fn [x]\n              (if (fn? x)\n                (wrap-js-function x)\n                x))\n            m))\n\n(defn reactify-component [component]\n  (let [reactified (forward-ref [props ref]\n                     (let [clj-props (assoc (js->clj' props) :ref ref)]\n                       (r/as-element [component clj-props])))]\n    (set! (.-displayName reactified) (fun-name component))\n    reactified))\n\n(defn wrap-styles [styles]\n  (if (fn? styles)\n    (fn [theme]\n      (-> (js->clj' theme)\n          (styles)\n          (wrap-all-clj-functions)\n          (clj->js')))\n    (clj->js' (wrap-all-clj-functions styles))))\n\n(defn apply-hoc [hoc component]\n  (-> component\n      (reactify-component)\n      (hoc)\n      (r/adapt-react-class)))\n\n(defn get-anycase\n  ([m k]\n   (get-anycase m k nil))\n  ([m k default]\n   (if-let [entry (or (find m (->kebab-case-keyword k))\n                      (find m (->camelCaseKeyword k)))]\n     (val entry)\n     default)))\n\n(defn assoc-anycase\n  ([m k v]\n   (assoc (dissoc m (->camelCaseKeyword k)) (->kebab-case-keyword k) v))\n  ([m k v & kvs]\n   (let [ret (assoc-anycase m k v)]\n     (if kvs\n       (recur ret (first kvs) (second kvs) (nnext kvs))\n       ret))))\n\n(defn remove-undefined-vals [m]\n  (persistent!\n   (reduce-kv (fn [acc k v]\n                (if (undefined? v)\n                  (dissoc! acc k)\n                  acc))\n              (transient m)\n              m)))\n\n(defn set-ref [ref value]\n  (cond\n    (fn? ref) (ref value)\n    ref (set! (.-current ref) value))\n  js/undefined)\n\n(defn swap-ref [ref f & args]\n  (set! (.-current ref) (apply f (.-current ref) args)))\n\n(defn use-fork-ref [& refs]\n  (react/useMemo #(when (not-every? nil? refs)\n                    (fn [value]\n                      (doseq [ref refs]\n                        (set-ref ref value))))\n                 (apply array refs)))\n\n(defn use-callback [callback props]\n  (react/useCallback callback props))\n\n(defn use-effect [effect props]\n  (react/useEffect effect props))\n\n(defn use-layout-effect [effect]\n  (react/useLayoutEffect effect))\n\n(defn use-ref [value]\n  (react/useRef value))\n\n(defn use-state [initial-state]\n  (react/useState initial-state))\n"],"x_google_ignoreList":[0]}