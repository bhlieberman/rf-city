{"version":3,"sources":["bhlie/rf_city/app.cljs"],"mappings":"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","names":["js/bhlie","js/bhlie.rf-city","js/bhlie.rf-city.app","js/bhlie.rf-city.app.root","bhlie.rf-city.app/root","js/module$node_modules$react_dom$client.createRoot","goog.dom/getElement","bhlie.rf-city.app/init-routes!","js/console","reitit.frontend.easy/start!","bhlie.rf-city.views/city-router","new-match","re-frame.core/dispatch","p__30652","map__30653","cljs.core/--destructure-map","cljs.core.get","bhlie.rf-city.app/nav","router","reagent-mui.material.app-bar/app-bar","reagent-mui.material.container/container","reagent-mui.material.toolbar/toolbar","reagent-mui.material.box/box","iter__5523__auto__","s__30655","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__30657","cljs.core/chunk-buffer","i__30656","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30654","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","route-name","reitit.core/route-names","route","reitit.core/match-by-name","text","reagent-mui.material.button/button","reitit.frontend.easy.href","p__30658","map__30659","bhlie.rf-city.app/router-component","cljs.core/deref","current-route","re_frame.core.subscribe","bhlie.rf-city.app/mount-root","re-frame.core/clear-subscription-cache!","reagent.core.as_element","bhlie.rf-city.app/init","re-frame.core/dispatch-sync","re-chain.core/configure!","effects","cljs.core.get_in","dispatch","cljs.core/assoc-in","cljs.core/chunk-first"],"sourcesContent":["(ns bhlie.rf-city.app\n  (:require [re-frame.core :as re-frame :refer [dispatch]]\n            [reagent.core :as r]\n            [goog.dom :as gdom]\n            [bhlie.rf-city.events]\n            [re-chain.core :as chain]\n            [bhlie.rf-city.views :refer [city-router home]]\n            [reitit.core :as rc]\n            [reitit.frontend.easy :as rfe :refer [start! href]]\n            [reagent-mui.material.app-bar :refer [app-bar]]\n            [reagent-mui.material.container :refer [container]]\n            [reagent-mui.material.toolbar :refer [toolbar]]\n            [reagent-mui.material.tooltip :refer [tooltip]]\n            [reagent-mui.material.box :refer [box]]\n            [reagent-mui.material.button :refer [button]]\n            [\"react-dom/client\" :refer [createRoot]]))\n\n(defonce root (createRoot (gdom/getElement \"app\")))\n\n(defn init-routes! []\n  (.log js/console \"initializing routes\")\n  (start! city-router (fn [new-match] (when new-match (dispatch [:app/navigated new-match])))\n          {:use-fragment false}))\n\n(defn nav [{:keys [router]}]\n  [app-bar {:id :top-banner\n            :position :static}\n   [container {:max-width \"xl\"}\n    [toolbar\n     [box {:sx {:flex-grow 1 :display {:xs \"none\" :md \"flex\"}}}\n      (for [route-name (rc/route-names router)\n            :let       [route (rc/match-by-name router route-name)\n                        text (-> route :data :link-text)]]\n        [button {:id :route-link :key route-name\n                 :sx {:my 2 :color \"white\" :display :block}}\n         [:a {:href (href route-name)} text]])]]]])\n\n(defn router-component [{:keys [router]}]\n  (let [current-route @(re-frame/subscribe [:app/current-route])]\n    [:div\n     [nav {:router router :current-route current-route}]\n     (when current-route\n       [(-> current-route :data :view)])]))\n\n(defn ^:dev/after-load mount-root []\n  (re-frame/clear-subscription-cache!)\n  (.render root (r/as-element [router-component {:router city-router}])))\n\n#_{:clj-kondo/ignore [:clojure-lsp/unused-public-var]}\n(defn init []\n  (re-frame/dispatch-sync [:config/initialize-app])\n  (chain/configure! [{:effect-present?   (fn [effects] (:http-xhrio effects))\n                      :get-dispatch (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch   (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  (init-routes!)\n  (mount-root))"]}