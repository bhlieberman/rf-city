{"version":3,"sources":["bhlie/rf_city/webgl.cljs"],"mappings":";;;AAQA,kCAAA,UAAA,gBAAA,aAAA,gBAAA,2CAAA,mDAAA,WAAA,mDAAA,8BAAA,wCAAA,yBAAA,6BAAA,jXAASA;AAST,8CAAA,9CAAMC,oGAA6BC,IAAIC,OAAWC;AAAlD,AACE,IAAUC,OAAKF;IACTG,QAAM,KAAAC;IACNC,SAAO,KAAAC;IACPC,SAAO,KAAAC;IACPC,WAAS,KAAAC;AAJf,AAKE,CAAM,AAASR,aAAM;AAAA,AAAO,IAAMS,gBAAc,KAAAC,mDAAA,WAAA;IACdC,oBAAkB,KAAAC,uDAAA,WAAA;aADxB,TAEMC;AAFN,AAGE,AAAA,+BAAA,IAAA,KAAA,xCAAIF;;AACJ,IAAAG,iBAAMb;AAAN,AAAA,AAAAa,mBAAkBL;;AAAlB,AAAAK,mBAAuCH;;AAAvCG;AACA,OAAOT,YAAOQ,OACP,WAAKE;AAAL,AAAW,AAAA,AAAA,qBAAA,KAAA,KAAA,/BAAIA;;AACb,CAAM,AAAA,AAAA,AAAIA,wBAA0BC;;AACpC,OAAMf,UAAMc;;;;AACnD,CAAM,AAAqBf,yBAAM,WAAAiB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaG;AAAb,AACE,IAAMd,eAAS,KAAAC,oDAAA,2CAAA,oEAAA,VAAyB,AAAUa,qEACTA;AADzC,AAEE,0BAAA,zBAAM,AAAad;;AACnB,QAAM,AAAA,AAAIF,wBACJ;AAAA,AAAO,OAAmBE,8BAAS;AAAA,AACE,AAAgBP;;AAChB,AAAaH,eAAI,AAAQE,UAAM,AAAWA,aAAM,AAAQA;;AACxD,GAAM,aAAA,ZAAG,AAAQA;AAAY,QAAM,AAAQA,YAAM,aAAA,ZAAG,AAAQA;;AAA5D,GACM,iBAAA,hBAAI,AAAWA;AACf,AAAI,CAAM,AAAWA,eAAM,gBAAA,fAAG,AAAWA;;AACrC,QAAM,AAAQA,YAAM,aAAA,ZAAG,AAAQA;;AAHzC,AAIY,qCAAA,9BAAmBQ;;;;;;;;AAC/G,CAAM,AAAUP,cAAM,WAAAsB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAJ,4BAAAI;SAAA,AAAAH,4CAAAG,eAAA,hEAAaF;kBAAb,AAAAD,4CAAAG,eAAA,zEAAoBC;AAApB,AAAmC,mBAAA,2CAAA,mEAAA,mEAAA,iDAAA,jPAAMC,6GAAmB,AAAA,AAAI1B,mEACJ,AAAA,AAAIA;IAEvB2B,SAAO,AAAqBF,+BAAYC;AAH9C,AAIE,CAAM,AAAoBtB,0BAAQ,AAAY,KAAAwB,2DAAWD;;AACzD,AAAgB1B;;AAChB,AAASO,gBAASN,MAAME;;AACxB,OAAaI;;;AACxE,OAASP,YAAKH;;AAElB,+BAAA,/BAAM+B,sEAAU/B,IAAIC,OAAOC;AAA3B,AACE,OAACH,4CAAwBC,IAAIC,OAAOC","names":["bhlie.rf-city.webgl/map-options","bhlie.rf-city.webgl/init-webgl-overlay-view","map","web-gl","opts","view","scene","js/module$node_modules$three$build$three.Scene","camera","js/module$node_modules$three$build$three.PerspectiveCamera","loader","js/module$node_modules$three$examples$jsm$loaders$GLTFLoader.GLTFLoader","renderer","js/module$node_modules$three$build$three.WebGLRenderer","ambient-light","js/module$node_modules$three$build$three.AmbientLight","directional-light","js/module$node_modules$three$build$three.DirectionalLight","source","G__41451","gltf","js/Math.PI","p__41452","map__41453","cljs.core/--destructure-map","cljs.core.get","gl","p__41454","map__41455","transformer","lat-long-alt","matrix","js/module$node_modules$three$build$three.Matrix4","bhlie.rf-city.webgl/init-map"],"sourcesContent":["(ns bhlie.rf-city.webgl\n  (:require [goog.dom :as gdom]\n            [shadow.cljs.modern :refer [js-await]]\n            [\"three\" :as three :refer [Scene PerspectiveCamera\n                                       AmbientLight DirectionalLight\n                                       Matrix4 WebGLRenderer]]\n            [\"three/examples/jsm/loaders/GLTFLoader\" :refer [GLTFLoader]]))\n\n(def ^js map-options #js {:tilt 0,\n                          :heading 0,\n                          :zoom 18,\n                          :center {:lat 35.6594945, :lng 139.6999859},\n                          :mapId \"15431d2b469f209e\",\n                          :disableDefaultUI true,\n                          :gestureHandling \"none\",\n                          :keyboardShortcuts false})\n\n(defn init-webgl-overlay-view [^js map web-gl ^js opts]\n  (let [^js view web-gl\n        scene (Scene.)\n        camera (PerspectiveCamera.)\n        loader (GLTFLoader.)\n        renderer (WebGLRenderer.)]\n    (set! (.-onAdd view) (fn [] (let [ambient-light (AmbientLight. 0xffffff 0.75)\n                                      directional-light (DirectionalLight. 0xffffff 0.25)\n                                      source \"https://raw.githubusercontent.com/googlemaps/js-samples/main/assets/pin.gltf\"]\n                                  (.. directional-light -position (set 0.5 -1 0.5))\n                                  (doto scene (.add ambient-light) (.add directional-light))\n                                  (.load loader source\n                                         (fn [gltf] (.. gltf -scene -scale (set 10 10 10))\n                                           (set! (.. gltf -scene -rotation -x) js/Math.PI)\n                                           (.add scene gltf))))))\n    (set! (.-onContextRestored view) (fn [{:keys [gl]}]\n                                       (let [renderer (WebGLRenderer. {:canvas (.-canvas gl)\n                                                                       :context gl})]\n                                         (set! (.-autoClear renderer) false)\n                                         (set! (.. loader -manager -onload)\n                                               (fn [] (.setAnimationLoop renderer (fn []\n                                                                                    (.requestRedraw view)\n                                                                                    (.moveCamera map (.-tilt opts) (.-heading opts) (.-zoom opts))\n                                                                                    (cond (< (.-tilt opts) 67.5) (set! (.-tilt opts) (+ (.-tilt opts) 0.5))\n                                                                                          (<= (.-heading opts) 360)\n                                                                                          (do (set! (.-heading opts) (+ (.-heading opts) 0.2))\n                                                                                              (set! (.-zoom opts) (- (.-zoom opts) 0.0005)))\n                                                                                          :else (.setAnimationLoop renderer nil)))))))))\n    (set! (.-onDraw view) (fn [{:keys [gl ^js transformer]}] (let [lat-long-alt {:lat (.. opts -center -lat)\n                                                                                 :lng (.. opts -center -lng)\n                                                                                 :alt 120}\n                                                                   matrix (.fromLatLngAltitude transformer lat-long-alt)]\n                                                               (set! (.-projectionMatrix camera) (.fromArray (Matrix4.) matrix))\n                                                               (.requestRedraw view)\n                                                               (.render renderer scene camera)\n                                                               (.resetState renderer))))\n    (.setMap view map)))\n\n(defn init-map [map web-gl opts]\n  (init-webgl-overlay-view map web-gl opts))"]}